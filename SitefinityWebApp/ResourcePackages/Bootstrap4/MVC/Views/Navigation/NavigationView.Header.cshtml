@model Telerik.Sitefinity.Frontend.Navigation.Mvc.Models.INavigationModel

@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Navigation.Mvc.Models;
@using Telerik.Sitefinity.Modules.Pages;

@using Telerik.Sitefinity.Web;

@functions {
    public static string EnableToggle(int ChildNodeCount, int itemNumber)
    {
        if (ChildNodeCount == 0)
        {
            return null;
        }

        return " data-toggle-mq=(max-width:768px) data-toggle=dropdown-" + itemNumber;
    }
}

<nav class="menu">
    <ul class="menu__wrapper">
        @{
            int itemNumber = 0;
        }
        @foreach (var node in Model.Nodes)
        {
            @RenderRootLevelNode(node, itemNumber);

            itemNumber++;
        }
    </ul>
</nav>

@helper RenderRootLevelNode(NodeViewModel node, int itemNumber)
{
<li class="menu__item menu__item--level-0">
    <a class="menu__link@(node.IsCurrentlyOpened || node.HasChildOpen ? " menu__link--active" : "")"
       href="@node.Url"
       target="@node.LinkTarget"
       @EnableToggle(node.ChildNodes.Count, itemNumber)>
        <span class="menu__link-text@(node.ChildNodes.Count > 0 ? " menu__link-text--has-caret" : "")">@node.Title</span>

        @if (node.ChildNodes.Count > 0)
        {
            <span class="menu__link-caret"></span>
        }
    </a>

    @if (node.ChildNodes.Count > 0)
    {

        if ((node.OriginalSiteMapNode as PageSiteNode).GetCustomFieldValue("isMegaMenu") != null && Convert.ToBoolean((node.OriginalSiteMapNode as PageSiteNode).GetCustomFieldValue("isMegaMenu")))
        {
            @RenderMegaMenu(node, itemNumber)
        }
        else
        {
            @RenderDropDown(node, itemNumber)
        }
    }
</li>
}

@helper RenderMegaMenu(NodeViewModel node, int itemNumber)
{
    <ul class="menu__drop-down menu__drop-down--mega" id="dropdown-@itemNumber">
        @foreach (var childNode in node.ChildNodes)
        {

            <li class="menu__item">
                <a class="menu__link" href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title</a>
                @if (childNode.ChildNodes.Count > 0)
                {
                    @RenderMegaSubMenu(childNode)
                }
            </li>
        }
    </ul>
}

@helper RenderMegaSubMenu(NodeViewModel node)
{
    <ul class="menu__sub-drop-down">
        @foreach (var childNode in node.ChildNodes)
        {
            <li class="menu__item">
                <a class="menu__link" href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title</a>
            </li>
        }
    </ul>
}

@helper RenderDropDown(NodeViewModel node, int itemNumber)
{
    <ul class="menu__drop-down" id="dropdown-@itemNumber">
        @foreach (var childNode in node.ChildNodes)
        {

            <li class="menu__item">
                <a class="menu__link" href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title</a>
            </li>
        }
    </ul>
}
